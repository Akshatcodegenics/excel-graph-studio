
import { toast } from "sonner";

export const downloadFile = (fileName: string, content?: string, type: 'file' | 'chart' | 'report' = 'file') => {
  try {
    let blob: Blob;
    let downloadFileName: string;

    switch (type) {
      case 'chart':
        // Create a sample chart image
        const canvas = document.createElement('canvas');
        canvas.width = 800;
        canvas.height = 600;
        const ctx = canvas.getContext('2d');
        if (ctx) {
          // Create a gradient background
          const gradient = ctx.createLinearGradient(0, 0, 800, 600);
          gradient.addColorStop(0, '#3b82f6');
          gradient.addColorStop(1, '#1e40af');
          ctx.fillStyle = gradient;
          ctx.fillRect(0, 0, 800, 600);
          
          // Add title
          ctx.fillStyle = 'white';
          ctx.font = '24px Arial';
          ctx.textAlign = 'center';
          ctx.fillText(`Chart: ${fileName}`, 400, 50);
          
          // Add some sample chart elements
          ctx.fillStyle = '#60a5fa';
          ctx.fillRect(100, 100, 50, 200);
          ctx.fillRect(200, 150, 50, 150);
          ctx.fillRect(300, 120, 50, 180);
          ctx.fillRect(400, 80, 50, 220);
          ctx.fillRect(500, 160, 50, 140);
          
          // Add labels
          ctx.fillStyle = 'white';
          ctx.font = '14px Arial';
          ctx.fillText('Q1', 125, 320);
          ctx.fillText('Q2', 225, 320);
          ctx.fillText('Q3', 325, 320);
          ctx.fillText('Q4', 425, 320);
          ctx.fillText('Total', 525, 320);
        }
        
        canvas.toBlob((canvasBlob) => {
          if (canvasBlob) {
            const url = URL.createObjectURL(canvasBlob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${fileName.replace('.xlsx', '')}_chart.png`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            toast.success(`Chart downloaded: ${a.download}`);
          }
        }, 'image/png');
        return;

      case 'report':
        // Create a sample report content
        const reportContent = `
ANALYTICS REPORT
================

File: ${fileName}
Generated: ${new Date().toLocaleString()}

SUMMARY
-------
This report contains comprehensive analytics for the file: ${fileName}

KEY INSIGHTS
------------
• Total data points analyzed: 1,247
• Average performance: 87.3%
• Growth rate: +12.5%
• Success rate: 94.2%

DETAILED ANALYSIS
-----------------
1. Performance Metrics
   - Efficiency: High
   - Accuracy: 94.2%
   - Speed: Optimal

2. Recommendations
   - Continue current strategies
   - Focus on optimization
   - Monitor key indicators

3. Next Steps
   - Implement suggested improvements
   - Schedule regular reviews
   - Update tracking metrics

CONCLUSION
----------
The analysis shows positive trends with room for targeted improvements.

Generated by Excel Analytics AI System
`;
        blob = new Blob([reportContent], { type: 'text/plain' });
        downloadFileName = `${fileName.replace('.xlsx', '')}_report.txt`;
        break;

      default:
        // Create sample Excel-like content
        const sampleContent = content || `
Sample Data,Value 1,Value 2,Value 3
Row 1,150,200,175
Row 2,225,180,195
Row 3,300,250,280
Row 4,175,190,205
Row 5,400,350,375
`;
        blob = new Blob([sampleContent], { type: 'text/csv' });
        downloadFileName = fileName.endsWith('.xlsx') ? fileName.replace('.xlsx', '.csv') : `${fileName}.csv`;
        break;
    }

    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = downloadFileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success(`File downloaded: ${downloadFileName}`);
  } catch (error) {
    console.error('Download error:', error);
    toast.error(`Failed to download ${fileName}`);
  }
};

export const exportAnalyticsReport = (period: string, chartType: string) => {
  try {
    const reportData = `
ANALYTICS EXPORT REPORT
=======================

Export Date: ${new Date().toLocaleString()}
Time Period: ${period}
Chart Type Filter: ${chartType}

PERFORMANCE SUMMARY
-------------------
• Total Charts Generated: 127
• Total Views: 2,456
• Total Downloads: 567
• Average Engagement: 78.3%

DETAILED METRICS
----------------
Chart Performance:
- Bar Charts: 45 (35.4%)
- Line Charts: 38 (29.9%)
- Pie Charts: 32 (25.2%)
- 3D Charts: 12 (9.4%)

User Engagement:
- Daily Active Users: 42
- Peak Usage Time: 2:00 PM - 4:00 PM
- Most Popular Features: Chart Generation, AI Insights

TOP PERFORMING FILES
--------------------
1. sales_data_q4.xlsx - 145 views, 23 downloads
2. inventory_analysis.xlsx - 89 views, 12 downloads
3. marketing_metrics.xlsx - 67 views, 8 downloads

INSIGHTS & RECOMMENDATIONS
--------------------------
• Chart generation is most active during business hours
• Bar charts are the preferred visualization type
• Mobile usage is increasing (32% of total traffic)

Generated by Excel Analytics System
Filter Applied: ${period} | ${chartType}
`;

    const blob = new Blob([reportData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analytics_report_${period}_${chartType}_${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success(`Analytics report exported successfully!`);
  } catch (error) {
    console.error('Export error:', error);
    toast.error('Failed to export analytics report');
  }
};
